//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MixUpEntities : DbContext
    {
        public MixUpEntities()
            : base("name=MixUpEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Discos> Discos { get; set; }
    
        public virtual int DiscosAdd(string titulo, string artista, string generoMusical, Nullable<System.TimeSpan> duracion, Nullable<System.DateTime> año, string distribuidora, Nullable<decimal> ventas, Nullable<bool> disponible, string imagen)
        {
            var tituloParameter = titulo != null ?
                new ObjectParameter("Titulo", titulo) :
                new ObjectParameter("Titulo", typeof(string));
    
            var artistaParameter = artista != null ?
                new ObjectParameter("Artista", artista) :
                new ObjectParameter("Artista", typeof(string));
    
            var generoMusicalParameter = generoMusical != null ?
                new ObjectParameter("GeneroMusical", generoMusical) :
                new ObjectParameter("GeneroMusical", typeof(string));
    
            var duracionParameter = duracion.HasValue ?
                new ObjectParameter("Duracion", duracion) :
                new ObjectParameter("Duracion", typeof(System.TimeSpan));
    
            var añoParameter = año.HasValue ?
                new ObjectParameter("Año", año) :
                new ObjectParameter("Año", typeof(System.DateTime));
    
            var distribuidoraParameter = distribuidora != null ?
                new ObjectParameter("Distribuidora", distribuidora) :
                new ObjectParameter("Distribuidora", typeof(string));
    
            var ventasParameter = ventas.HasValue ?
                new ObjectParameter("Ventas", ventas) :
                new ObjectParameter("Ventas", typeof(decimal));
    
            var disponibleParameter = disponible.HasValue ?
                new ObjectParameter("Disponible", disponible) :
                new ObjectParameter("Disponible", typeof(bool));
    
            var imagenParameter = imagen != null ?
                new ObjectParameter("Imagen", imagen) :
                new ObjectParameter("Imagen", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DiscosAdd", tituloParameter, artistaParameter, generoMusicalParameter, duracionParameter, añoParameter, distribuidoraParameter, ventasParameter, disponibleParameter, imagenParameter);
        }
    
        public virtual int DiscosDelete(Nullable<int> discosID)
        {
            var discosIDParameter = discosID.HasValue ?
                new ObjectParameter("DiscosID", discosID) :
                new ObjectParameter("DiscosID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DiscosDelete", discosIDParameter);
        }
    
        public virtual ObjectResult<DiscosGetAll_Result> DiscosGetAll(string titulo, string artista)
        {
            var tituloParameter = titulo != null ?
                new ObjectParameter("Titulo", titulo) :
                new ObjectParameter("Titulo", typeof(string));
    
            var artistaParameter = artista != null ?
                new ObjectParameter("Artista", artista) :
                new ObjectParameter("Artista", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DiscosGetAll_Result>("DiscosGetAll", tituloParameter, artistaParameter);
        }
    
        public virtual ObjectResult<DiscosGetById_Result> DiscosGetById(Nullable<int> discosID)
        {
            var discosIDParameter = discosID.HasValue ?
                new ObjectParameter("DiscosID", discosID) :
                new ObjectParameter("DiscosID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DiscosGetById_Result>("DiscosGetById", discosIDParameter);
        }
    
        public virtual int DiscosUpdate(Nullable<int> discosID, string titulo, string artista, string generoMusical, Nullable<System.TimeSpan> duracion, Nullable<System.DateTime> año, string distribuidora, Nullable<decimal> ventas, Nullable<bool> disponible, string imagen)
        {
            var discosIDParameter = discosID.HasValue ?
                new ObjectParameter("DiscosID", discosID) :
                new ObjectParameter("DiscosID", typeof(int));
    
            var tituloParameter = titulo != null ?
                new ObjectParameter("Titulo", titulo) :
                new ObjectParameter("Titulo", typeof(string));
    
            var artistaParameter = artista != null ?
                new ObjectParameter("Artista", artista) :
                new ObjectParameter("Artista", typeof(string));
    
            var generoMusicalParameter = generoMusical != null ?
                new ObjectParameter("GeneroMusical", generoMusical) :
                new ObjectParameter("GeneroMusical", typeof(string));
    
            var duracionParameter = duracion.HasValue ?
                new ObjectParameter("Duracion", duracion) :
                new ObjectParameter("Duracion", typeof(System.TimeSpan));
    
            var añoParameter = año.HasValue ?
                new ObjectParameter("Año", año) :
                new ObjectParameter("Año", typeof(System.DateTime));
    
            var distribuidoraParameter = distribuidora != null ?
                new ObjectParameter("Distribuidora", distribuidora) :
                new ObjectParameter("Distribuidora", typeof(string));
    
            var ventasParameter = ventas.HasValue ?
                new ObjectParameter("Ventas", ventas) :
                new ObjectParameter("Ventas", typeof(decimal));
    
            var disponibleParameter = disponible.HasValue ?
                new ObjectParameter("Disponible", disponible) :
                new ObjectParameter("Disponible", typeof(bool));
    
            var imagenParameter = imagen != null ?
                new ObjectParameter("Imagen", imagen) :
                new ObjectParameter("Imagen", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DiscosUpdate", discosIDParameter, tituloParameter, artistaParameter, generoMusicalParameter, duracionParameter, añoParameter, distribuidoraParameter, ventasParameter, disponibleParameter, imagenParameter);
        }
    }
}
